# functions to help with the project
import numpy as np
import pandas as pd
# Plotting packages
import matplotlib.pyplot as plt
# Other packages needed
import math


# FUNCTION: calcEnergyBreakdown
# INPUTS:
# - country_df: the dataframe of values associated with the countries
# - model_df: the dataframe of values associated with the model
#   note: expected that both "Total Energy Demand" and "Percent Energy from Renewable"
#         have already been set in the model
# OUTPUTS:
# - model_df: the updated dataframe of values associated with the model
#   note: see calculations performed for new model values created
# CALCULATIONS PERFORMED:
#   based on the "Total Energy Demand", "Percent Energy from Renewable", and various
#   default country information (e.g. "Existing Renewable Capacity"), generate the following:
# - "Amount Energy from Existing Renewable": the amount of energy generated by/from exisiting renewable capabilities
# - "Amount Energy from New Renewable": the amount of energy generated by/from new renewable sources (developed via investment)
# - "Amount Energy from Fossil Fuel": the amount of energy generated by/from fossil fuel sources (aka "everything else" that's not renewable)
def calcEnergyBreakdown(country_df, model_df):
    totaldemand_renewable = model_df["Total Energy Demand"].astype(float) * model_df["Percent Energy from Renewable"].astype(float)/100

    model_df["Amount Energy from Existing Renewable"]= totaldemand_renewable
    model_df["Amount Energy from Existing Renewable"][model_df["Amount Energy from Existing Renewable"]>country_df["Existing Renewable Energy Capacity"]]= country_df["Existing Renewable Energy Capacity"].values
    model_df["Amount Energy from New Renewable"] = totaldemand_renewable - model_df["Amount Energy from Existing Renewable"]
    model_df["Amount Energy from Fossil Fuel"] = model_df["Total Energy Demand"].astype(float) - totaldemand_renewable

    return model_df

#print(calcEnergyBreakdown(country_df, model_df))
# FUNCTION: calcEnergyCosts
# INPUTS:
# - country_df: the dataframe of values associated with the countries
# - model_df: the dataframe of values associated with the model
#   note: expected that "Amount Energy from Existing Renewable", "Amount Energy from New Renewable",
#   and "Amount Energy from Fossil Fuel" have been created within the model
# OUTPUTS:
# - model_df: the updated dataframe of values associated with the model
#   note: see calculations performed for new model values created
# CALCULATIONS PERFORMED:
#   based on various energy amounts, as well as the cost-per-energy units from the country data,
#   calculate the following and add the values to the model:
# - "Cost Energy from Existing Renewable": float value of the cost of renewable energy generated by existing capabilities (in $USD)
# - "Cost Energy from New Renewable": float value of the cost of renewable energy generated via new sources, developed via investment in renewable energy (in $USD)
# - "Cost Energy from Fossil Fuel": float value of the cost of energy generated via fossil fuel (in $USD)
# - "Cost Energy Total": float value of the TOTAL cost of energy across all three sources (in $USD)

# TASK 3.3: define and write the calcEnergyCosts function according to the above specification
def calcEnergyCosts(country_df, model_df):
    model_df["Cost Energy from Existing Renewable"] = model_df["Amount Energy from Existing Renewable"] * country_df["ECR Energy from Existing Renewable"].values
    model_df["Cost Energy from New Renewable"] =  model_df["Amount Energy from New Renewable"] * country_df["ECR Energy from New Renewable"].values
    model_df["Cost Energy from Fossil Fuel"] = model_df["Amount Energy from Fossil Fuel"] * country_df["ECR Energy from Fossil Fuel"].values
    model_df["Cost Energy Total"] = model_df["Cost Energy from Existing Renewable"] + model_df["Cost Energy from New Renewable"] + model_df["Cost Energy from Fossil Fuel"]
    return model_df


# FUNCTION: calcFossilFuelEmissions
# INPUTS:
# - model_df: the dataframe of values associated with the model
#   note: expected that "Amount Energy from Fossil Fuel" has been created within the model
# OUTPUTS:
# - model_df: the updated dataframe of values associated with the model
#   note: see calculations performed for new model values created
# CALCULATIONS PERFORMED:
#   based on the "Amount Energy from Fossil Fuel", as well as the amount of emissions created
#   by fossil fules, this function calcualtes and adds the following value to the model:
# - "Emissions from Fossil Fuel": float value of the amount of emissions associated
#      with producing energy via fossil fuel, measured in in million metric tons (Mt) of CO2
# - note #1: it is 0.000388 metric tons (mt) of CO2 per kWh
# - note #2: divide by 10-to-the-6th to convert metric tons (mt) to million metric tons (Mt)

# TASK 3.4: define and write the calcFossilFuelEmissions function according to the above specification
def calcFossilFuelEmissions(model_df):
    model_df["Emissions from Fossil Fuel"] = 0.000388 * model_df["Amount Energy from Fossil Fuel"]/1000000
    return model_df

# FUNCTION: calcWaterRequiredEnergy
# INPUTS:
# - country_df: the dataframe of values associated with the countries
# - model_df: the dataframe of values associated with the model
#   note: expected that "Amount Energy from Fossil Fuel" has been created within the model
# OUTPUTS:
# - model_df: the updated dataframe of values associated with the model
#   note: see calculations performed for new model values created
# CALCULATIONS PERFORMED:
#   based on the "Amount Energy from Fossil Fuel", calculates and creates the following
#   value in the model:
# - "Water Required for Energy": float value of amount of water required for energy
#   production (in Cubic Kilometer, or Km^3)
# - note: use the "WRC Energy from Fossil Fuel" country value

# TASK 3.5: define and write the calcWaterRequiredEnergy function according to the above specification
def calcWaterRequiredEnergy(country_df, model_df):
    model_df["Water Required for Energy"]= country_df["WRC Energy from Fossil Fuel"].values * model_df["Amount Energy from Fossil Fuel"]
    return model_df
# FUNCTION: modelEnergy
# INPUTS:
# - country_df: the dataframe of values associated with the countries
# - model_df: the dataframe of values associated with the model
#   note: expected that both "Total Energy Demand" and "Percent Energy from Renewable"
#         have already been set in the model
# OUTPUTS:
# - model_df: the updated dataframe of values associated with the model
#   note: lots of new aspects of the model are added via this function,
#   like "Amount Energy from Existing Renewable", "Amount Energy from New Renewable",
#   "Amount Energy from Fossil Fuel", "Cost Energy from Existing Renewable",
#   "Cost Energy from New Renewable", "Cost Energy from Fossil Fuel", 
#   "Cost Energy Total", "Emissions from Fossil Fuel", and "Water Required for Energy"

# TASK 4: create modelEnergy() function based on the above specifications
def modelEnergy(country_df, model_df):
    calcEnergyBreakdown(country_df, model_df)
    calcEnergyCosts(country_df, model_df)
    calcFossilFuelEmissions(model_df)
    calcWaterRequiredEnergy(country_df, model_df)
    return model_df

# FUNCTION: calcWSI
# INPUTS:
# - water_used: the amount (in cubic km) of water used/required/needed
# - water_available: the amount (in cubic km) of water available
# OUTPUTS:
# - WSI: the Water Stress Indicator, which is a ratio of the water used to the
#   total amount of water available

# TASK 6: create the calcWSI() function based on the above specifications
def calcWSI(water_used,water_available):
    WSI_energy = water_used/water_available
    return WSI_energy

###### INSTRUCTOR PROVIDED CODE #########

# FUNCTION: print_df
# INPUTS:
# - df_in: a dataframe in to print (country_df or model_df)
# - units: a dataframe of units
# BEHAVIOR:
# - this function doesn't return anything, but it combines
#   the df_in with the units and prints the result
def print_df(df_in, units):
    # this function does a nice-formatted/fancy printing of a dataframe with units
    # e.g. call print_df(country_df, units) to print the country data with units
    # e.g. call print_df(model_df, units) to print the model data with units
    # CODE: this is a "fancy" way of printing the model dataframe with units merged into the dataframe
    print(df_in.transpose().merge(units,left_index=True, right_index=True))

# This code is for setting Pandas Display Options
# - we have modified how Pandas displays the dataframes (e.g. all columns and rows)
#   as well as doing some "nicer" formatting of really big numbers (e.g. x10^6
#   represented as "e+6")
# - you can comment out these lines if you do NOT want to do special formatting of Pandas
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.float_format', lambda x:bignums(x))
millnames = ['','e+3','e+6','e+9','e+12']

def bignums(n):
    #from https://stackoverflow.com/questions/3154460/python-human-readable-large-numbers
    n = float(n)
    millidx = max(0,min(len(millnames)-1,
                        int(math.floor(0 if n == 0 else math.log10(abs(n))/3))))
    return '{:.3f}{}'.format(n / 10**(3 * millidx), millnames[millidx])